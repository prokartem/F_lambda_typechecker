{- simple -}
lambda x : Y -> X. 
    lambda y : Y. 
        x $ y;

{- 1.1.1 -}
lambda x : A -> A -> G.
    lambda y : A.
        lambda z : B.
            x $ y $ y;

{- 1.1.2 -}
lambda x : (A -> G) -> A.
    lambda y : A -> G. 
        lambda z : B. 
            y $ (x $ y);

{- 1.2.1 -}
lambda x : A -> B -> G. 
    lambda y : A -> B. 
        lambda z : A. 
            x $ z $ (y $ z);

{- 1.2.2 -}
lambda y : G -> A -> B. 
    lambda z : G. 
        lambda x : (A -> B) -> B. 
            x $ (y $ z);

{- 1.2.3 -}
lambda x : A -> A -> B.
    lambda y : A.
        lambda z : B -> G.
            z $ (x $ y $ y);

{- 1.2.4 -}
lambda y : B -> A -> G.
    lambda z : A.
        lambda x : A -> B.
            y $ (x $ z) $ z;

{- 2.1 -}
{- K -}
Lambda X. Lambda Y.
    lambda x : X.
        lambda y : Y.
            x;

{- 2.2 -}
{- S -}
Lambda Z. Lambda Y. Lambda X.
    lambda x : Z -> Y -> X.
        lambda y : Z -> Y.
            lambda z : Z.
                x $ z $ (y $ z);

{- 2.3 -}
lambda x : Forall A. A.
    x $ [(Forall A. A) -> (Forall A. A) -> (Forall A. A)] 
      $ (
            x $ [(Forall A. A) -> (Forall A. A)] 
              $ x
      ) 
      $ (
            x $ [(Forall A. A) -> (Forall A. A) -> (Forall A. A)] 
              $ x 
              $ x
      );
      
{- polymorphic identity -}
Lambda X.
    lambda x : X.
        x;

{- self-application -}
lambda x : Forall A. A -> A.
    x $ [ Forall A. A -> A ] $ x;

{- 2 iterarions -}
{- iter2 -}
Lambda X.
    lambda f : X -> X.
        lambda x : X.
            f $ (f $ x);

{- 4 iterarions -}
Lambda X. (
        {- iter2 -}
        Lambda X.
            lambda f : X -> X. 
                lambda x : X . 
                    f $ (f $ x)
    ) 
    $ [ X -> X ] 
    $ ( (
            {- iter2 -}
            Lambda X. 
                lambda f : X -> X. 
                    lambda x : X . 
                    f $ (f $ x)
        ) 
        $ [ X ]
    );

{- 0 -}
Lambda X.
    lambda s : X -> X.
        lambda z : X.
            z;

{- succesor -}
lambda n : Forall X. (X -> X) -> X -> X.
    Lambda X.
        lambda s : X -> X.
            lambda z : X.
                s $ (n $ [ X ] $ s $ z)